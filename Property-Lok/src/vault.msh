db.vault.drop();
db.createCollection('vault', {
	validator: {
		$jsonSchema: {
			bsonType: "object",
			description: QUOTE(VERSION),
			required: ["PropertyLockerId","PropertyStorageCode","PropertyName","PropertySKU","PropertyStatus", "Common"],
			properties: {
				PropertyLockerId: {
					bsonType: "string",
					description: "Property Locker ID"
				},
				PropertyStorageCode: {
					bsonType: "string",
					minLength: 4,
					maxLength: 128,
					description: "PropertyStorageCode is a one way HASH, ALWAYS generated if Enabled or not"
				},
				EnablePropertyStorageCode: {
					bsonType: "bool",
					description: "Enable/disable PSC to lock and unlock vault item, default is FALSE - no PSC required to unlock the item"
				},
				PropertyName: {
				    bsonType: "string",
					minLength: 4,
					maxLength: 128,
					description: "Property Storage Name is a user entered value"
				},
				PropertySKU: {
					bsonType: "string",
					minLength: 4,
					maxLength: 24,
					description: "Property SKU is a system generated SKU mnemonic - used for  ANONYMOUS ID"
				},
				SerialVIN: {
					bsonType: "string",
					maxLength: 64,
					description: "Serial number or VIN -typically 17 digits IN USA since 1981-is user suppied"
				},
				MakeManufacturer: {
					bsonType: "string",
					maxLength: 64,
					description: "MakeManufacturer is user suppied"
				},
				ModelNumber: {
					bsonType: "string",
					minLength: 4,
					description: "ModelNumber is user suppied"
				},
				PropertyDescription: {
					bsonType: "string",
					minLength: 4,
					maxLength: 1024,
					description: "PropertyDescription is user suppied"
				},
				Files: {
					bsonType: "array",
					items: {
						bsonType: "string",
						maxLength: 512,
						description: "URLs of Files in S3 bucket"
					}
				},
				Metadata: {
					bsonType: "array",
					items: {
						bsonType: "string",
						maxLength: 128,
						description: "File Metadata array - join with File GUID"
					}
				},
				Thumbnails: {
					bsonType: "array",
					items: {
						bsonType: "string",
						maxLength: 128,
						description: "Vault Assets - Thumbnail Pics"
					}
				},
				Tags: {
					bsonType: "array",
					items: {
						bsonType: "string",
						maxLength: 128,
						description: "Array of tags"
					}
				},
				PropertyStatus: {
					bsonType: "string",
					enum: ["Stored","Locked", "Stolen", "For Sale", "Transferred", "Recovered", "Unrecovered"],
					description: "NOTE - Stored state follows PSC enabled: if unlocked set to Stored,Locked if locked, set to 'Locked",
				},
				PropertyGeolocation: {
					bsonType: "string",
					maxLength: 256,
					description: "PropertyGeolocation is string with latitude, longitude"
				},
				DescriptorCategory: {		
					bsonType: "string",
					maxLength: 32,
					description: "Lookup from SYS_CATEGORIES"
				},
				AdditionalInformation: {
					bsonType: "string",
					maxLength: 256,
					description: "AdditionalInformation User generated"
				},
				PurchaseDateLocation: {
					bsonType: "string",
					maxLength: 64,
					description: "PurchaseDate & Location User generated, perhaps concatenate a date() & location on entry?"
				},
				AppraisalOrPurchasePrice: {
					bsonType: "number",
					minimum: 0.0,
					maximum: 999999.99,
					description: "AppraisalOrPurchasePrice is user generated"
				},
				SalesReceptURL: {
					bsonType: "string",
					minLength: 8,
					maxLength: 128,
					description: "URL to sales receipt scanned image or email text file uploaded to S3 bucket URI"
				},
#include "CommonDef.inc"
			}
		}
	}
});

db.vault.insertOne(
	{
		PropertyLockerId: "0000-0000-0000-0000-0000-0000",
		PropertyStorageCode: "HASH OF Something",
		EnablePropertyStorageCode: false,
		PropertyName: "A rembrandt",
		PropertySKU: "deadbeef",
		SerialVIN: "0000001",
		MakeManufacturer: "Rembrandt",
		ModelNumber: "A made up number",
		PropertyDescription: "A rembrandt copy",
		Files: ["file 1", "File 2" ],
		Metadata: ["Meta 1", "Meta2"],
		Thumbnails: ["thumb1", "thumb2"],
		Tags: ["Tag 1", "Tag 2"],
		PropertyStatus: "Lost",
		PropertyGeolocation: "20.65744, -103.39393",
		DescriptorCategory: "Art",
		AdditionalInformation: "Another fake art",
		PurchaseDateLocation: "5/2/22 at home",
		AppraisalOrPurchasePrice: 50000,
		PropertyStatus: "Stored",
		salesReceiptURL: "a valid URL",
#include "CommonConst.inc"
	}
);
db.vault.find();

