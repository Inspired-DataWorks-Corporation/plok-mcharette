db.customUser.drop();
db.createCollection('customUser', {
	validator: {
		$jsonSchema: {
			bsonType: "object",
			description: QUOTE(VERSION),
			required: ["email", "Role", "FirstName", "LastName", "UserName", "SubscriptionTerm", "PoliciesAccepted", "Common"],
			properties: {
				email: {
					bsonType: "string",
					minLength: 8,
					maxLength: 128,
					description: "required, unique, signin, signup"
				},
				CompanyName: {
					bsonType: "string",
					maxLength: 64,
					minLength: 4,
					description: "unique (CompanyName), copy of UserName if not entered, validate from ORG if not Role=ORG, signin, signup"
				},
				Role: {
					bsonType: "string",
					enum: ["ADMIN", "DEVELOPER", "MEMBER", "ORG", "VISITOR"],
					description: "required. Limited to enum. Default to MEMBER. Generated at signup - INVITE Only for Other than Member/Visitor"
				},
				FirstName: {
					bsonType: "string",
 					minLength: 2,
					maxLength: 64,
					description: "required, signup"
				},
				LastName: {
					bsonType: "string",
					minLength: 2,
					maxLength: 128,
					description: "required, signup"
				},
				UserName: {
					bsonType: "string",
					minLength: 4,
					maxLength: 128,
					description: "Generated concentenate 8+8chars of FirstName+LastName: required. Must be unique, signin, signup, generated but may be overiden"
				},
				Address: {
					bsonType: "array",
					items: {
						bsonType: "string",
						minLength: 4,
						maxLength: 1024,
					},
					description: "required. \
						Format: Street, City, State/Region, Postal Code \
						Needs validation \
						signup"
				},
				MobilePhoneNumber: {
					bsonType: "string",
					minLength: 10,
					maxLength: 128,
					description: " must be a valid 10 digit phone #"
				},
				PicAvatarURL: {
					bsonType: "string",
					minLength: 8,
					maxLength: 256,
					description: "URL to avatar/pic, signup, default avater to pick"
				},
				EmailVerified: {
					bsonType: "bool",
					description: "Upon MFA acceptance of generated Token"
				},
				SubscriptionTerm: {
					bsonType: "string",
					enum: ["Annual", "Upgrade"],
					description: "string and is required. Limited to enum, signup"
				},
				SubscriptionTermExpiry: {
					bsonType: "date",
					description: "Today's Date + 1 Year - set in API"
				},
				Geolocation: {
					bsonType: "string",
					maxLength: 128,
					description: "PropertyGeolocation is string formatted aa latitude, longitude where \
						latitude coordinate is between -90.0 and 90.90 and \
						longitude coordinate is between -180.0 and 180.0 \
						nnn decimal places.",
				},
				AlternateFirstname: {
					bsonType: "string",
 					minLength: 2,
					maxLength: 64,
					description: "signup OPTIONAL"
				},
				AlternateLastname: {
					bsonType: "string",
					minLength: 2,
					maxLength: 128,
					description: "signup OPTIONAL"
				},
 				AlternateEmail: {
					bsonType: "string",
					minLength: 8,
					maxLength: 128,
					description: "signup OPTIONAL"
				},
				DailySearchLimit: {
					bsonType: "int",
					description: "integer set by the subscription associated with this member, signup"
				},
				PropertyRegistrationLimit: {
					bsonType: "int",
					description: "integer set by the subscription associated with this member, signup"
				},
				UsageUpchargeThreshhold: {
					bsonType: "int",
					description: "When to upcharge"
				},
				PoliciesAccepted: {
					bsonType: "bool",
					description: "boolean and is required, default false, signup"
				},
#include "CommonDef.inc"
			}
		}
	}
});
db.customUser.createIndex(
 	{
		"email": 1
	},
	{
		unique: true
	}
);
db.customUser.createIndex( 
	{
		"UserName": 1
	},
	{
		unique: true
	}
);
db.customUser.insertOne(
	{	
		email: "dont@reachme.com",
		CompanyName: "Property-Lok",
		Role: "MEMBER",
		FirstName: " Mark",
		LastName: "Charette",
		UserName: "mcharet2",
		Address: ["128 Nowhere St, Nowhere, MA, 12345"],
		MobilePhoneNumber: "9983718824",
		PicAvatarURL: "none right now",
		EmailVerified: false,
		SubscriptionTerm: "Annual",
		SubscriptionTermExpiry : new Date(ISODate().setDate(ISODate().getDate() + 365)),
#include "GeoLocationConst.inc"
		AlternateFirstname: "kraM",
		AlternateLastname: "etterahC",
		AlternateEmail: "nowhere@nohow.org",	
		DailySearchLimit: 40,
		PropertyRegistrationLimit: 20,
		UsageUpchargeThreshold: 20,
		PoliciesAccepted: true,
#include "CommonConst.inc"
	}
);
db.customUser.find();

